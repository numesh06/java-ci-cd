pipeline {
  agent any

  environment {
    SONARQUBE_SERVER = 'http://host.docker.internal:9001'
    DOCKER_IMAGE = 'nanumesh/java-app:latest'
    KUBECONFIG = '/var/jenkins_home/.kube/config'
}

stages {
   stage('Checkout'){
      steps {
        git branch: 'main', url: 'https://github.com/numesh06/spring-petclinic.git'
      }
   }
        
stage('Build'){
    steps {
        script {
            docker.image('maven:3.9.6-eclipse-temurin-17').inside {
                sh 'mvn clean package'
            }
        }
    }
}

stage('Test') {
    steps {
        script {
            docker.image('maven:3.9.6-eclipse-temurin-17').inside {
                sh 'mvn test'
            }
        }
    }
}

stage('Static Code Analysis') {
    steps {
        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
        script {
            docker.image('maven:3.9.6-eclipse-temurin-17').inside {
                sh 'mvn sonar:sonar -Dsonar.host.url=${SONARQUBE_SERVER} -Dsonar.login=$SONAR_TOKEN'
            }
            }
        }
    }
}

stage('Build Docker Image') {
    steps {
        script {
            sh 'docker build -t ${DOCKER_IMAGE} .'
        }
    }
}

stage('Push to Docker Hub') {
    steps {
        script {
            sh 'docker login -u nanumesh -p Nandhu_docker2'
            sh 'docker push ${DOCKER_IMAGE}'
        }
    }
}

stage('Deploy to Kubernetes') {
    steps {
        script {
            docker.image('bitnami/kubectl:latest').inside('--entrypoint="" -v /root/.kube:/root/.kube --network host') {
            // sh 'export KUBECONFIG=/var/jenkins_home/.kube/config'
            withEnv(["KUBECONFIG=/root/.kube/config"]) {
                    sh 'kubectl apply --validate=false -f k8s/deployment.yaml'
                    sh 'kubectl apply --validate=false -f k8s/service.yaml'
                }
            // sh 'kubectl --kubeconfig=/var/jenkins_home/.kube/config apply --validate=false -f k8s/deployment.yaml'
            // sh 'kubectl --kubeconfig=/var/jenkins_home/.kube/config apply --validate=false -f k8s/service.yaml'
	   	        }
            }
        }
    }
}
}
